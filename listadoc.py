import streamlit as st
import pandas as pd
import os

def main():
    st.title("Formulario de Documentaci√≥n")
    st.markdown("**üìã Nota importante**")
    st.write("Los documentos opcionales no son obligatorios pero son altamente sugeridos para aumentar las probabilidades de aprobaci√≥n y tener un flujo r√°pido de la operaci√≥n.")

    # Definir el nombre y la ruta del archivo Excel
    archivo_excel = "checklist4.xlsx"  # Ruta completa del archivo


    # Asegurarse de que el archivo se encuentra en la ruta especificada
    if not os.path.exists(archivo_excel):
        st.error(f"El archivo {archivo_excel} no se encuentra en la ruta especificada.")
        return

    # Cargar datos desde el archivo Excel
    df_ident = pd.read_excel(archivo_excel, sheet_name="Documentaci√≥n de indentificaci√≥")
    df_garantia = pd.read_excel(archivo_excel, sheet_name="Documentacion de garant√≠a")
    df_otros = pd.read_excel(archivo_excel, sheet_name="Otros ")
    df_tipos = pd.read_excel(archivo_excel, sheet_name="tipos de ingreso")

    # Limpiar los espacios y caracteres extra√±os en las columnas relevantes
    df_tipos["Tipo de ingreso"] = df_tipos["Tipo de ingreso"].str.strip().str.lower()
    df_tipos["Actividad ec√≥nomica"] = df_tipos["Actividad ec√≥nomica"].str.strip()
    df_tipos["Modalidad"] = df_tipos["Modalidad"].str.strip()

    # Mostrar los documentos obligatorios
    st.markdown("## ‚úèÔ∏è Documentos de Identificaci√≥n")
    st.write("**Estos documentos son obligatorios para el ingreso a riesgos:**")
    if len(df_ident) > 0:
        for doc in df_ident["Documentaci√≥n"]:
            st.write(f"- {doc}")

    st.markdown("## ‚úÖ Documentos de Garant√≠a")
    st.write("**Estos documentos no son requeridos por el √°rea de riesgos para determinar su aprobaci√≥n. S√≠ son requeridos para realizar estudio de t√≠tulos de la propiedad y tasar el inmueble:**")
    if len(df_garantia) > 0:
        for doc in df_garantia["Documentaci√≥n"]:
            st.write(f"- {doc}")
    st.write("Si crees que la garant√≠a puede ser d√©bil, de baja comercialidad o est√° en las periferias, te recomendamos que env√≠es una foto y la ubicaci√≥n de la garant√≠a.")

    st.markdown("## ‚≠ê Otros Documentos para la Evaluaci√≥n (Complementarios seg√∫n la operaci√≥n)")
    st.markdown("**Documentos obligatorios seg√∫n sea el caso:**")
    if len(df_otros) > 0:
        for doc in df_otros["Documentaci√≥n"]:
            st.write(f"- {doc}")
    st.markdown("**Documentos que pueden ayudar a esclarecer una observaci√≥n de riesgos**")
    st.markdown("‚Ä¢ (Opcional) Cartas de no Adeudo: para acreditar si alguna deuda reportada actualmente ya ha sido cancelada")
    st.markdown("‚Ä¢ (Opcional) Documentos que fortalezcan el destino como por ejemplo:")
    st.markdown("    -Si el cliente va a comprar una maquinaria o activo fijo con el pr√©stamo, nos servir√≠a la proforma de qu√© va a comprar.")
    st.markdown("    -Si el cliente hiciera una remodelaci√≥n con el pr√©stamo, nos servir√≠a el presupuesto de obra del proyecto de remodelaci√≥n.")
    st.markdown("**Si el cliente paga un pr√©stamo con garant√≠a inmobiliaria a un acreedor que no es un Banco, Caja o cooperativa:**")
    st.markdown("‚Ä¢ (Obligatorio) Cronograma de pagos del pr√©stamo.")
    st.markdown("‚Ä¢ (Obligatorio) √öltimos 6 vouchers de pago de la cuota.")
    st.markdown("‚Ä¢ (Obligatorio) Liquidaci√≥n para cancelar el pr√©stamo a 25 d√≠as desde la fecha actual.")
    st.markdown("‚Ä¢ (Opcional) Minuta o testimonio del pr√©stamo con garant√≠a hipotecaria.")
    st.markdown("‚Ä¢ Nota: no puede haber atrasos en este tipo de pr√©stamos, lo m√°ximo tolerable es hasta 8 d√≠as.")

    # Opciones de tipo de ingreso
    tipos_ingreso_opciones = df_tipos["Tipo de ingreso"].drop_duplicates().str.capitalize().tolist()

    st.markdown("## üíµDocumentos de Ingresos")
    st.write("Estos son los documentos que son requisitos para que sea evaluado por el equipo de riesgos.")
    st.markdown("## üåé Selecci√≥n de Tipo de Ingreso")
    st.write("Aqu√≠ puede ser un ingreso declarado por SUNAT o un ingreso no declarado a SUNAT (Informal)")
    tipo_seleccionado = st.selectbox("Elige el tipo de ingreso", tipos_ingreso_opciones)

    # Convertir la selecci√≥n a min√∫sculas para coincidir con el DataFrame
    tipo_seleccionado = tipo_seleccionado.lower()

    # Filtrar actividades econ√≥micas basadas en el tipo de ingreso seleccionado
    actividades_economicas = df_tipos[df_tipos["Tipo de ingreso"] == tipo_seleccionado]["Actividad ec√≥nomica"].drop_duplicates().unique()

    # Mostrar selecci√≥n de actividad econ√≥mica
    st.markdown("## üíº Selecci√≥n de Actividad Econ√≥mica")
    actividad_seleccionada = st.selectbox("Elige la actividad econ√≥mica", actividades_economicas)

    # Filtrar modalidades basadas en el tipo de ingreso y actividad econ√≥mica seleccionados
    modalidades_disponibles = df_tipos[
        (df_tipos["Tipo de ingreso"] == tipo_seleccionado) &
        (df_tipos["Actividad ec√≥nomica"] == actividad_seleccionada)
    ]["Modalidad"].drop_duplicates().unique()

    # Mostrar selecci√≥n de modalidad
    st.markdown("## ‚öôÔ∏è Selecci√≥n de Modalidad")
    st.write("Para ciertos tipos de ingresos, tenemos hasta 2 opciones de sustentaci√≥n:")
    modalidad_seleccionada = st.selectbox("Elige la modalidad", modalidades_disponibles)

    # Filtrar los documentos basados en el tipo de ingreso, actividad econ√≥mica y modalidad seleccionados
    documentos_filtrados = df_tipos[
        (df_tipos["Tipo de ingreso"] == tipo_seleccionado) &
        (df_tipos["Actividad ec√≥nomica"] == actividad_seleccionada) &
        (df_tipos["Modalidad"] == modalidad_seleccionada)
    ]

    # Mostrar los documentos requeridos
    st.markdown("## üìÑ Documentos Requeridos (seg√∫n selecci√≥n)")
    if documentos_filtrados.empty:
        st.write("No hay documentos espec√≠ficos para esta combinaci√≥n.")
    else:
        for doc in documentos_filtrados["Documentaci√≥n"]:
            st.write(f"- {doc}")

if __name__ == "__main__":
    main()
